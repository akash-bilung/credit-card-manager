// =========  Media Queries  ========= //

$small-desktop: 960px;
$large-desktop: 1200px;
$handheld: 768px;
$handhelds-landscape: 1024px;
$laptop: 1024px;
$mobile: 640px;
$mobileSmall : 320px;
$mobile-landscape: 480px;

@mixin responsive($media) {

  @if $media == mobileSmall {
    @media only screen and (max-width: $mobileSmall) {
      @content;
    }
  }
  @if $media == largeDesktop {
    @media only screen and (min-width: $large-desktop) {
      @content;
    }
  }
  @if $media == smallDesktop {
    @media only screen and (max-width: $small-desktop) {
      @content;
    }
  }
  @if $media == handhelds {
    @media only screen and (max-width: $handheld) {
      @content;
    }
  }
  @if $media == laptops {
    @media only screen and (max-width: $laptop) {
      @content;
    }
  }
  @if $media == handhelds-landscape {
    @media only screen and (min-width: $handheld) and (max-width: $handhelds-landscape) and (orientation: landscape) {
      @content;
    }
  }
  @if $media == mobile {
    @media only screen and (max-width: $mobile) {
      @content;
    }
  }
  @if $media == mobile-portrait {
    @media only screen and (max-width: $mobile) and (orientation: portrait) {
      @content;
    }
  }
  @if $media == mobile-landscape {
    @media only screen and (min-width: 320px) and (max-width: $mobile-landscape) and (orientation: landscape) {
      @content;
    }
  }

  @if $media == retina {
    @media (-webkit-min-device-pixel-ratio: 2) {
      @content;
    }
  }

  @if $media == ipads {
    @media only screen and (min-width: 768px) and (max-width: 1024px) {
      @content;
    }
  }

  @if $media == ipads-landscape {
    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
      @content;
    }
  }

  @if $media == ipads-portrait {
    @media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: portrait) {
      @content;
    }
  }

  @if $media == iphone5 {
    @media only screen and (device-aspect-ratio: 40/71) {
      @content;
    }
  }
}

// Centering element
@mixin centered($direction) {
  position: absolute;
  backface-visibility: hidden;

  // If vertically centered
  @if $direction == yAxis {
    top: 50%;
    transform: translateY(-50%);
  }

  // If horizontally centered
  @if $direction == xAxis{
    left: 50%;
    transform: translateX(-50%);
  } 

  // If centered
  @if $direction == zAxis{
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
  }
}

// Convert hex to CSS filter
@mixin recolor($color: #000, $opacity: 1) {
  $r: red($color) / 255;
  $g: green($color) / 255;
  $b: blue($color) / 255;
  $a: $opacity;

  // grayscale fallback if SVG from data url is not supported
  $lightness: lightness($color);
  filter: saturate(0%) brightness(0%) invert($lightness) opacity($opacity);

  // color filter
  $svg-filter-id: "recolor";
  filter: url('data:image/svg+xml;utf8,\
    <svg xmlns="http://www.w3.org/2000/svg">\
      <filter id="#{$svg-filter-id}" color-interpolation-filters="sRGB">\
        <feColorMatrix type="matrix" values="\
          0 0 0 0 #{$r}\
          0 0 0 0 #{$g}\
          0 0 0 0 #{$b}\
          0 0 0 #{$a} 0\
        "/>\
      </filter>\
    </svg>\
    ##{$svg-filter-id}');
}

// Color map to loop through
$theme: () !default;
$theme: map-merge(
  (
    "primary": $primary,
    "secondary": $secondary
  ),
  $theme
);
